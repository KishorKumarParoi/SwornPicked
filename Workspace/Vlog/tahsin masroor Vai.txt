অনলাইন জাজ (OJ in short) হলো প্রোগ্রামিং কনটেস্টের জন্য প্র্যাক্টিসের জন্য বেস্ট প্লেস। এই ওয়েবসাইটগুলোতে অসংখ্য প্রোগ্রামিং প্রবলেম থাকে যার সোলিউশন ওখানে সাবমিট করলে কিছুক্ষণের মধ্যেই ওয়েবসাইটটা ভারডিক্ট বলে দিবে।

কিছু পোপুলার অনলাইন জাজের লিস্টঃ
https://uva.onlinejudge.org/
http://lightoj.com
http://www.spoj.com/
http://hackerrank.com/
http://codeforces.com/
http://codechef.com/ 
https://algo.codemarshal.org/problems (এখানকার কিছু প্রবলেমের ডেসক্রিপশন বাংলায়)
https://www.urionlinejudge.com.br/judge/en/login
https://toph.co
কনটেস্ট প্রোগ্রামিং এর জন্য সবকিছু বিবেচনা করে সবচেয়ে ভাল প্রোগ্রামিং ল্যাংগুয়েজ হলো সি/সি++, আমাদের মতে। কোন প্রোগ্রামিং ল্যাংগুয়েজই যদি শেখা না থাকে, তবে সেক্ষেত্রে আগে একটু বেসিক শিখে নেওয়া উচিত, ডাইরেক্ট অনলাইন জাজে ঢুকার বদলে। সেক্ষেত্রে তামিম শাহ্‌রিয়ার সুবিন স্যারের বই দেখা যেতে পারে, লিংকঃ http://cpbook.subeen.com/
ভারডিক্টঃ

যেকোনও ওজেতে সোলিউশন সাবমিটের পর তারা রেজাল্ট দিবে, যাকে ভারডিক্ট বলা হয়। ভারডিক্টগুলো যা যা হতে পারে -

Accepted (AC): প্রবলেম সল্ভিং সফল, এই উপলক্ষে ট্রিট দিয়ে দেওয়া উচিত :P
Wrong Answer (WA): সলিউশন এই প্রবলেমের জন্য পারফেক্ট না। প্রবলেমের লিমিট অনুযায়ী সম্ভব সব ধরণের ইনপুটের জন্য সঠিক আউটপুট আসতেছে না। প্রবলেমে যে sample input দেওয়া আছে, শুধু তার জন্য কোড ঠিক করলেই কিন্তু হবে না। OJ আরও অনেক ধরণের ইনপুটের জন্যই কোড চেক করে দেখবে। 
এক্ষেত্রে নানা ধরণের ভুল হতে পারে। যেমন; লজিকে ভুল। অথবা ঠিক যেভাবে অ্যান্সার প্রিন্ট করতে বলা হয়েছে প্রবলেমে, তা করা হচ্ছে না। অথবা, অল্প কিছু কঠিন টেস্ট কেসের জন্য কোড ঠিক করা হয়নি (ক্রিটিক্যাল টেস্টকেস)। 
এসব ক্ষেত্রে সব সময় কটা জিনিসে খেয়াল রাখা উচিত - আউটপুটে ব্ল্যাঙ্ক লাইন আর স্পেস যতগুলা যেভাবে দিতে বলা হয়েছে, তা দেওয়া হচ্ছে কিনা। কর্নার কেসগুলো চেক করা হয়েছে কিনা (মানে সম্ভাব্য ইনপুটের সবচেয়ে ছোট আর বড় মানগুলো, যেমন n = 0 or n = 100000000 যখন 0 <= n <= 10^8)।

গুগোল করলে অনেক প্রবলেমেরই অনেক ক্রিটিক্যাল টেস্টকেস পাওয়া যায়। আর www.udebug.com-এও বেশিরভাগ uva/lightoj প্রবলেমেরই কিছু ইনপুট/আউটপুট দেওয়া আছে।

Time Limit Exceeded (TLE): প্রবলেমের উপরে যদি time limit: 3 seconds, তারমানে সবগুলো ইনপুটের জন্য মোট ৩ সেকেন্ডের মাঝেই আউটপুট দিতে হবে, যদি টাইম পার হয়ে যায় তাহলে এই ভারডিক্ট দিবে। তখন চিন্তা করতে হবে কিভাবে কোড অপটিমাইজ করা যায়। আমরা সাধারণত ধরে নেই, ১ সেকেন্ডে মোটামুটি ১০^৮ পর্যন্ত লুপ চালানো যাবে। মানে, 10^8টি লাইন এক্সেকিউটেড হতে টাইম লাগে 1 সেকেন্ড।

অর্থাৎ, for (i = 1; i <= 10^8; i++) এই লুপটা চলতে প্রায় 1 সেকেন্ড লাগা উচিত। খেয়াল করো, লুপটা যদি 10^9 বার চলে, তাহলে ঐকিক নিয়ম অনুসারে কিন্তু ১০ সেকেন্ড লেগে যাবে।

কোডের সময় সব সময় চিন্তা করা উচিত এরকম সর্বোচ্চ কত সেকেন্ড লাগতে পারে এই কোডটা চলতে। এটা বুঝার জন্যই প্রবলেম ডেস্ক্রিপশনে ইনপুটের লিমিট বলে দেওয়া হয়। এটা আস্তে আস্তে অভিজ্ঞতার সাথে শিখবে। তবে টাইম কমপ্লেক্সিটি নিয়ে আরও ধারণা পেতে শাফায়েত ভাইয়ের এই লেখাটা পড়া উচিতঃ http://www.shafaetsplanet.com/planetcoding/?p=1313

Run Time Error (RTE): রানটাইম এরর হয় যখন কোড ইম্পসিবল কিছু করতে যেয়ে ক্রাশ করে। যেমন; ০ দিয়ে ভাগ বা মডের চেষ্টা। বা, অ্যারের এলিমেন্ট ডিক্লেয়ার করা ১০টা (int arr[10]), অথচ ১০ ইন্ডেক্সের অ্যারে এলিমেন্ট অ্যাক্সেসের চেষ্টা (printf(“%d”, arr[10]; arr[10] ডিক্লেয়ার করলে এলিমেন্ট থাকে ০ থেকে ৯ পর্যন্ত, ১০ ইন্ডেক্সের কোনও এলিমেন্ট থাকে না)। এর জন্য কোডব্লক্স কোনও ঝামেলা না করলেও অনলাইন জাজ কিন্তু rte দিবে।
আবার, নেগেটিভ ইন্ডেক্স অ্যাক্সেস করতে গেলেও RTE দিবে। 
10^9 এর মত বিরাট অ্যারে ডিক্লেয়ার করলে অনেক সময় এ সমস্যা হয়, বা int main() এর মধ্যে 10^7 এর মত বিরাট অ্যারে ডিক্লেয়ার করলে। নাল বা গার্বেজে পয়েন্টার অ্যাক্সেসের মত আরও নানা সমস্যা হতে পারে, তবে সবচেয়ে কমন সমস্যা ০ দিয়ে ভাগ আর অ্যারে ইন্ডেক্সের ভুল, তাই আগে ওগুলো চেক করা উচিত।
return 0; না দেওয়ার জন্যও RTE দেয় অনেক সময়।

Memory Limit Exceeded (MLE): টিএলই-র মেমোরি ভার্সন।

Presentation Error (PE): যদি কোডে অতিরিক্ত space প্রিন্ট করা হয়, তাহলে এই verdict দিবে। তারমানে সলিউশন ঠিকই আছে, তবে প্রিন্টিং ফরমেট ঠিক নাই। অনেক সময় ঠিক একই ভুলের জন্য WA-ও দেয়।
আরও কিছু ভারডিক্ট আছে (যেমন; OLE), তবে এগুলোই সবচেয়ে কমন।

সাধারণত, একদম নতুনদের সাজেস্ট করা হয় ইউভিএর সোজা প্রবলেমগুলো দিয়ে শুরু করতে। এর দুটা সুবিধা। প্রথমত, ইউভিএ-তে যে পরিমাণ সোজা প্রবলেম আছে তা লাইটওজে বা কোডফোর্সেসের মত সাইটগুলোতে নেই, তাই শুরু করার জন্য ইজিয়ার। দ্বিতীয়ত, ইউভিএ-এর কিছু প্রবলেম পড়তে বেশ কষ্ট, কিন্তু এসিএম আইসিপিসির (International Collegiate Programming Contest) মতো বড় কনটেস্টগুলোতেও কিন্তু এমন প্রবলেম থাকে, তাই এগুলোতে অভ্যস্ত একসময় হওয়াই লাগবে।

UVa problems for beginners: https://web.facebook.com/notes/ruet-analytical-programming-lab-rapl/uva-easy-problems-for-absolutely-new-beginners/386203024920807
তবে ইউভিএ করে প্রবলেম সল্ভিং-এ কিছুটা অভ্যস্ত হওয়ার পরই হার্ডার প্রবলেম সল্ভিং-এ মুভ করা উচিত। কারণ, একই টাইপের অনেকগুলা খুব সহজ প্রবলেম সল্ভ করার থেকে বিভিন্ন টাইপের ইম্পর্ট্যান্ট প্রবলেম সল্ভ করা বেটার। এক্ষেত্রে লাইটওজে সাজেস্ট করা হয় কারণ এখানকার প্রবলেমগুলো বেশ স্ট্যান্ডার্ড। প্রবলেমগুলো থেকে নানা জিনিস শেখার থাকে, এদের বেগিনারস সেকশন দ্রুত করে ফেলার চেষ্টা করা উচিত।

LOJ problems for beginners: https://web.facebook.com/groups/341771679363942/479386788935763/
লাইটওজেতে সল্ভ করার সময় কোনও প্রবলেমে আটকে গেলে তার ফোরাম টপিক পড়া উচিত। কারণ অনেক সময়ই সেখানে নতুন কিছু শেখার থাকে।
১৬ সিরিজের কনটেস্ট্যান্টদের শুরুতে যেসব কনটেস্ট/ম্যারাথন দেওয়া হয়েছিল সেগুলো পাওয়া যাবে এখানেঃ https://www.facebook.com/notes/ruet-analytical-programming-lab-rapl/grooming-ruet16-for-sports-programming-document/649899721884468/
এগুলোও ফলো করা উচিত, এগুলোতেও সোজা থেকে ধীরে ধীরে কঠিনের দিকে গিয়েছে, তাই বিগিনারদের জন্য ভাল।

Codeforces-এর বেস্ট পার্ট হলো ওখানে কিছুদিন পরপরই (সাধারণত দুই ঘণ্টার) কনটেস্ট হয়। এবং সেগুলোর A আর B প্রবলেমগুলো ইমপ্লিমেন্টেশন স্কিল প্র্যাকটিসের জন্য খুব ইম্পর্ট্যান্ট। তবে প্রথমদিকে প্রবলেমগুলো বেশ কঠিন লাগতে পারে। তো প্রথমে না পারলেও তা স্বাভাবিকই, সেটা নিয়ে চিন্তার কিছু নাই, আস্তে আস্তে হবে। কোডফোর্সেসে উচ্চ রেটিংধারীদের স্ট্যাটিস্টিকস দেখলে দেখা যাবে তারাও শুরুতে বেশ খারাপ করছিল, অনেক রেটিং হারিয়ে ছিল, তারপর আস্তে আস্তে উঠে এসেছে। একদম প্রথমে কোডফোর্সেস করার দরকার নাই, তবে ইউভিএ লাইটওজের কিছু প্রবলেম সল্ভের পর করাই যায়, ট্রাই করতে তো দোষ নাই। একটা কথা। ভয় পাওয়া যাবে না কখনও। ভয়হীনতা প্রবলেম সল্ভিং-এ একটা বিরাট  অ্যাসেট। 
আর মোটামুটি বেশ কিছু প্রবলেম সল্ভিং-এর পর থেকে কোডফোর্সেস রেগুলার করার ট্রাই করতে হবে, এটা কিন্তু প্রচুর উন্নতি ঘটায়। এখানকার কনটেস্টগুলোর পরে এডিটোরিয়াল (সল্ভের ব্যাখ্যা) থাকে, কনটেস্ট শেষেও প্রবলেম সল্ভ করে সাবমিট করা যায়, তখন জাজের ইনপুটও দেখা যায়, এ ব্যাপারটা বেশ সুবিধার।

 
একটা প্রবণতা অনেকের মধ্যেই প্রথমদিকে দেখা যায়। শুরুতেই অনেক অ্যালগোরিদম শিখার চেষ্টা। আমাদের সিনিয়ররা এটা নিষেধ করেছিলেন, আর তার সুফলও এখন দেখতে পাচ্ছি। প্রথমে অ্যালগোরিদম শিখতে অনেক কষ্ট হবে। কিন্তু, প্রথমে যদি শুধু অ্যাড-হক টাইপের প্রবলেম সল্ভ করে লজিক বিল্ড-আপ খুব ভালভাবে করা হয়, তাহলে পরে অ্যালগোরিদম শিখা অনেক সহজ হয়ে যায়। আর ভাল লজিক, ইমপ্লিমেন্টেশন স্কিল সবসময়ই লাগবে। সেগুলো ছাড়া যত অ্যালগোরিদমই শিখা হোক, খুব একটা লাভ হবে না। তাই আগে লজিক বিল্ডআপ, ইমপ্লিমেন্টেশন স্কিল বাড়ানোতে খুব ভাল হওয়ার চেষ্টা করতে হবে। এমন পর্যায়ে যেতে হবে যেন কোনও লজিক কল্পনা করলেই তা কোডে ইমপ্লিমেন্ট করতে পারো। সেই সাথে কিছু নাম্বার থিওরী প্রবলেমও সল্ভ করা উচিত। কিন্তু, অ্যালগোরিদম আরও পরে।
তবে নানা ধরণের প্রবলেম সল্ভিং ট্রিক কিন্তু শিখতেই পারো। যেমন; প্রাইম বের করার জন্য সীভ, ইউক্লিডিয়ান পদ্ধতিতে জিসিড বের করা ইটিসি। এসবের জন্য ব্লগ পড়া অনেক কাজে দেয়, শাফায়েত ভাইয়ের ব্লগ আর লাইটওজের Training-এর আর্টিকেলগুলো ভাল ভাল ট্রিক শিখার জন্য অনেক উপকারী।
নতুনদের কয়েকটা জিনিস মাথায় রাখতে হবে। কনটেস্টে ভাল করার জন্য প্রবলেম সল্ভিং-এর উপরে কিছু নাই। এই লাইনে (ঠিকভাবে) যত পরিশ্রম দেওয়া হবে, তত রেজাল্ট পাবে। অনেক অনেক সল্ভ করলে এক সময় দেখবে প্রবলেম দেখলেই তা পরিচিত লাগতেছে, কারণ এই টাইপের অন্য প্রবলেম আগেই সল্ভ করেছো। তাই, ভাল কিছু চাইলে, বড় বড় স্বপ্ন দেখতে চাইলে, খাটতে হবে। হতাশা আসবেই, কিন্তু তাতে হার মেনে নিলে তো হেরেই গেলে। ঠিকভাবে চললে ওয়ার্ল্ড ফাইনালে যাওয়াও কোন অসম্ভব স্বপ্ন না ;)

Good luck.

References:
http://www.shafaetsplanet.com/planetcoding/?p=1400
https://www.hackerearth.com/notes/getting-started-with-the-sport-of-programming/
https://web.facebook.com/groups/341771679363942/permalink/480665315474577/
বড় ভাইদের দেওয়া উপদেশ 